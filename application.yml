# COMMON APPLICATION PROPERTIES

server:
  # start services on random port by default
  port: 0
  # The stop processing uses a timeout which provides a grace period during which existing requests will be allowed to complete but no new requests will be permitted
  shutdown: graceful

# embedded database init, supports mysql too trough the 'mysql' spring profile
spring:
  sql:
    init:
      schema-locations: classpath*:db/hsqldb/schema.sql
      data-locations: classpath*:db/hsqldb/data.sql
  sleuth:
    sampler:
      probability: 1.0
  cloud:
    config:
      # Allow the microservices to override the remote properties with their own System properties or config file
      allow-override: true
      # Override configuration with any local property source
      override-none: true
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none

# Spring Boot 1.5 makes actuator secure by default
management.security.enabled: false

# Temporary hack required by the Spring Boot 2 / Spring Cloud Finchley branch
# Waiting issue https://github.com/spring-projects/spring-boot/issues/13042
spring.cloud.refresh.refreshable: false

management:
  endpoints:
    web:
      exposure:
        include: '*'
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      enabled: true
      endpoint: "http://zipkin.tracing.svc.cluster.local:9411/api/v2/spans"
  endpoint:
    health:
      show-details: always
    env:
      show-values: ALWAYS
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  observations:
    httpclient:
      enabled: true
    key-values:
      'service.name': ${SPRING_APPLICATION_NAME:petclinic}
      namespace: ${NAMESPACE:default}


logging:
  pattern:
    console: '%clr(%d{yyyy-MM-dd''T''HH:mm:ss.SSSXXX}){faint} %clr(%5p) level="%p" time="%d{yyyy-MM-dd''T''HH:mm:ss.SSSXXX}" service="${spring.application.name}" traceId="%X{traceId:-}" spanId="%X{spanId:-}" thread="%t" logger="%logger{39}" message="%m"%n'
    file: '%d{yyyy-MM-dd''T''HH:mm:ss.SSSXXX} level="%p" time="%d{yyyy-MM-dd''T''HH:mm:ss.SSSXXX}" service="${spring.application.name}" traceId="%X{traceId:-}" spanId="%X{spanId:-}" thread="%t" logger="%logger{39}" message="%m"%n'
  level:
    io.micrometer.tracing: ${LOGGING_LEVEL_IO_MICROMETER_TRACING:DEBUG}
    org.springframework.cloud.sleuth: DEBUG
    org.springframework.cloud.sleuth.autoconfig: DEBUG
    org.springframework.web: DEBUG
  charset:
    console: UTF-8
    file: UTF-8

# Chaos Engineering
---
spring:
  config:
    activate:
      on-profile: chaos-monkey      
management.endpoint.chaosmonkey.enabled: true
chaos:
  monkey:
    enabled: true
    watcher:
      component: false
      controller: false
      repository: false
      rest-controller: false
      service: false

---
spring:
  config:
    activate:
      on-profile: mysql
  datasource:
    url: jdbc:mysql://localhost:3306/petclinic?allowPublicKeyRetrieval=true&useSSL=false
    username: root
    password: petclinic
  sql:
    init:
      schema-locations: classpath*:db/mysql/schema.sql
      data-locations: classpath*:db/mysql/data.sql
      mode: ALWAYS